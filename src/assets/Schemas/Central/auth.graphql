type AuthPayload implements GeneralResponse {
    message: String!
    expires_at: DateTime
    token_name: String
    access_token: String
    user: User
}

type LogoutResponse {
    status: String!
    message: String
}
type RegisterResponse {
    payload: AuthPayload
    status: RegisterStatuses!
}
type RegisterTenantResponse {
    status: RegisterStatuses!
}

input LoginInput {
    email: String!
    password: String!
}
input RegisterInput {
    name: String! @rules(apply: ["required", "string"])
    email: String! @rules(apply: ["required", "email", "unique:users,email"])
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    password_confirmation: String!
}
input RegisterTenantInput {
    domain: String! @rules(apply: ["required", "string"])
}

enum RegisterStatuses {
    MUST_VERIFY_EMAIL
    SUCCESS
}


type Mutation {
    login(input: LoginInput! @spread): AuthPayload! @field(resolver: "App\\Resolvers\\Central\\User\\LoginResolve@resolve")
    logout: LogoutResponse! @field(resolver: "App\\Resolvers\\Central\\User\\LogoutResolve@resolve")
    register(input: RegisterInput! @spread): RegisterResponse! @field(resolver: "App\\Resolvers\\Central\\User\\RegisterResolve@resolve")
    registerTenant(input: RegisterTenantInput @spread): RegisterTenantResponse! @field(resolver: "App\\Resolvers\\Central\\Tenant\\RegisterResolve@resolve")
}
